import { Test, TestingModule } from '@nestjs/testing';
import { ExecutionContext, INestApplication } from '@nestjs/common';
import * as request from 'supertest';
import { AppModule } from 'src/app.module';
import { DataSource, QueryRunner } from 'typeorm';
import { JwtAuthGuard } from 'src/auth/guards/jwtAuth.guard';
import Redis from 'ioredis';
import { testRedisConfig } from 'src/configs/redis.config';
import { DiariesRepository } from 'src/diaries/diaries.repository';
import { Diary } from 'src/diaries/entity/diary.entity';
import { DiaryStatus } from 'src/diaries/entity/diaryStatus';
import { MoodDegree } from 'src/diaries/utils/diaries.constant';
import { User } from 'src/users/entity/user.entity';
import { UsersRepository } from 'src/users/users.repository';
import { SocialType } from 'src/users/entity/socialType';
import { Friend } from 'src/friends/entity/friend.entity';
import { FriendsRepository } from 'src/friends/friends.repository';
import { FriendStatus } from 'src/friends/entity/friendStatus';
import { TimeUnit } from 'src/diaries/dto/timeUnit.enum';
import { subMonths } from 'date-fns';
import { TagsRepository } from 'src/tags/tags.repository';

describe('Dairies Controller (e2e)', () => {
  let app: INestApplication;
  let queryRunner: QueryRunner;
  let diariesRepository: DiariesRepository;
  let usersRepository: UsersRepository;
  let friendsRepository: FriendsRepository;
  let tagsRepository: TagsRepository;

  const redis = new Redis(testRedisConfig);
  const mockUser = {
    id: 1,
    email: 'test@test.com',
    nickname: 'test',
    socialId: 'test123',
    socialType: SocialType.NAVER,
    profileImage: 'testImage',
  } as User;

  beforeAll(async () => {
    await redis.flushall();

    const module: TestingModule = await Test.createTestingModule({
      imports: [AppModule],
    })
      .overrideGuard(JwtAuthGuard)
      .useValue({
        canActivate: (context: ExecutionContext) => {
          const req = context.switchToHttp().getRequest();
          req.user = mockUser;

          return true;
        },
      })
      .compile();

    const dataSource = module.get<DataSource>(DataSource);
    queryRunner = dataSource.createQueryRunner();
    dataSource.createQueryRunner = jest.fn();
    queryRunner.release = jest.fn();
    (dataSource.createQueryRunner as jest.Mock).mockReturnValue(queryRunner);

    diariesRepository = module.get<DiariesRepository>(DiariesRepository);
    usersRepository = module.get<UsersRepository>(UsersRepository);
    friendsRepository = module.get<FriendsRepository>(FriendsRepository);
    tagsRepository = module.get<TagsRepository>(TagsRepository);

    app = module.createNestApplication();
    await app.init();
  });

  afterAll(async () => {
    await redis.quit();
    await app.close();
  });

  beforeEach(async () => {
    await queryRunner.startTransaction();
  });

  afterEach(async () => {
    await redis.flushall();
    await queryRunner.rollbackTransaction();
  });

  describe('/diaries (POST)', () => {
    it('ÏùºÍ∏∞ Ï†ÄÏû• ÏôÑÎ£å ÌõÑ ÏôÑÎ£å Î©îÏãúÏßÄ Î∞òÌôò', async () => {
      //given
      const tagNames = ['ÏïàÎÖï', 'ÏïàÎÖïÌïòÏÑ∏Ïöî', 'Ï†ÄÎ¶¨Í∞ÄÏÑ∏Ïöß'];
      const mockDiary = {
        title: 'ÏùºÍ∏∞ Ï†úÎ™©',
        content: 'ÏùºÍ∏∞ ÎÇ¥Ïö©',
        emotion: 'üê∂',
        tagNames,
        status: 'private',
      };
      await usersRepository.save(mockUser);

      //when
      const response = await request(app.getHttpServer()).post('/diaries').send(mockDiary);

      //then
      expect(response.status).toEqual(201);
    });

    it('requestÏóê ÌïÑÏöî Í∞íÏù¥ ÏóÜÎã§Î©¥, 400ÏóêÎü¨ Î∞òÌôò', async () => {
      //given
      const mockDiary = {};
      await usersRepository.save(mockUser);

      //when
      const response = await request(app.getHttpServer()).post('/diaries').send(mockDiary);

      //then
      expect(response.status).toEqual(400);
      expect(response.body.message).toHaveLength(5);
      expect(response.body.message).toContain('title should not be empty');
      expect(response.body.message).toContain('content should not be empty');
      expect(response.body.message).toContain('emotion should not be empty');
      expect(response.body.message).toContain(
        'status must be one of the following values: private, public',
      );
      expect(response.body.message).toContain('status should not be empty');
    });

    it('Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ status Í∞íÏúºÎ°ú ÏöîÏ≤≠ Ïãú, 400ÏóêÎü¨ Î∞òÌôò', async () => {
      //given
      const mockDiary = {
        title: 'ÏùºÍ∏∞ Ï†úÎ™©',
        content: 'ÏùºÍ∏∞ ÎÇ¥Ïö©',
        emotion: 'üê∂',
        status: 'wrong status',
      };
      await usersRepository.save(mockUser);

      //when
      const response = await request(app.getHttpServer()).post('/diaries').send(mockDiary);

      //then
      expect(response.status).toEqual(400);
      expect(response.body.message).toHaveLength(1);
      expect(response.body.message).toContain(
        'status must be one of the following values: private, public',
      );
    });
  });

  describe('/diaries/friends (GET)', () => {
    const mockFriend = {
      email: 'test2@test.com',
      nickname: 'test2',
      socialId: 'test2',
      socialType: SocialType.NAVER,
      profileImage: 'testImage',
    } as User;
    const mockFriendRelation = {
      sender: mockFriend,
      receiver: mockUser,
      status: FriendStatus.COMPLETE,
    } as Friend;

    beforeEach(async () => {
      await usersRepository.save(mockUser);
      await usersRepository.save(mockFriend);
      await friendsRepository.save(mockFriendRelation);
    });

    it('ÏùºÍ∏∞ Ï°¥Ïû¨ Ïãú ÏùºÍ∏∞ ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Î∞òÌôò', async () => {
      //given
      const mockDiary = {
        title: 'ÏùºÍ∏∞ Ï†úÎ™©',
        content: 'ÏùºÍ∏∞ ÎÇ¥Ïö©',
        emotion: 'üê∂',
        status: DiaryStatus.PUBLIC,
        summary: 'ÏöîÏïΩ',
        mood: MoodDegree.BAD,
        author: mockFriend,
      } as Diary;

      const savedDiary = await diariesRepository.save(mockDiary);

      //when
      const response = await request(app.getHttpServer()).get(`/diaries/friends`);
      const body = response.body;

      //then
      expect(response.status).toEqual(200);
      expect(body.diaryList).toHaveLength(1);
      expect(body.diaryList[0].diaryId).toEqual(savedDiary.id);
    });

    it('privateÏúºÎ°ú ÏÑ§Ï†ïÎêú ÏπúÍµ¨ ÏùºÍ∏∞ Ï°∞Ìöå Î∂àÍ∞Ä', async () => {
      //given
      const mockDiary = {
        title: 'ÏùºÍ∏∞ Ï†úÎ™©',
        content: 'ÏùºÍ∏∞ ÎÇ¥Ïö©',
        emotion: 'üê∂',
        status: DiaryStatus.PRIVATE,
        summary: 'ÏöîÏïΩ',
        mood: MoodDegree.BAD,
        author: mockFriend,
      } as Diary;

      await diariesRepository.save(mockDiary);

      //when
      const response = await request(app.getHttpServer()).get(`/diaries/friends`);
      const body = response.body;

      //then
      expect(response.status).toEqual(200);
      expect(body.diaryList).toHaveLength(0);
    });

    it('lastIndexÎ•º ÏÑ§Ï†ïÌïòÎ©¥ Ìï¥Îãπ indexÎ≥¥Îã§ idÍ∞Ä ÏûëÏùÄ ÏùºÍ∏∞ Ï†ïÎ≥¥ Î∞òÌôò', async () => {
      //given
      let lastIndex = 0;
      for (let i = 0; i < 5; i++) {
        const mockDiary = {
          title: 'ÏùºÍ∏∞ Ï†úÎ™©',
          content: 'ÏùºÍ∏∞ ÎÇ¥Ïö©',
          emotion: 'üê∂',
          status: DiaryStatus.PUBLIC,
          summary: 'ÏöîÏïΩ',
          mood: MoodDegree.BAD,
          author: mockFriend,
        } as Diary;

        await diariesRepository.save(mockDiary);
        if (i == 2) {
          lastIndex = mockDiary.id;
        }
      }

      //when
      const response = await request(app.getHttpServer()).get(
        `/diaries/friends?lastIndex=${lastIndex}`,
      );
      const body = response.body;

      //then
      expect(response.status).toEqual(200);
      expect(body.diaryList).toHaveLength(2);
    });
  });

  describe('/diaries/:id (GET)', () => {
    it('ÏùºÍ∏∞ Ï°¥Ïû¨ Ïãú ÏùºÍ∏∞ ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Î∞òÌôò', async () => {
      //given
      const mockDiary = {
        title: 'ÏùºÍ∏∞ Ï†úÎ™©',
        content: 'ÏùºÍ∏∞ ÎÇ¥Ïö©',
        emotion: 'üê∂',
        status: DiaryStatus.PRIVATE,
        summary: 'ÏöîÏïΩ',
        mood: MoodDegree.BAD,
        author: mockUser,
      } as Diary;

      const savedUser = await usersRepository.save(mockUser);
      const savedDiary = await diariesRepository.save(mockDiary);

      //when
      const response = await request(app.getHttpServer()).get(`/diaries/${savedDiary.id}`);
      const body = response.body;

      //then
      expect(response.status).toEqual(200);
      expect(body.emotion).toEqual('üê∂');
    });

    it('ÏùºÍ∏∞ Ï†ïÎ≥¥Í∞Ä Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏúºÎ©¥ 400 ÏóêÎü¨ Î∞úÏÉù', async () => {
      //given
      const diaryId = 1;

      //when
      const response = await request(app.getHttpServer()).get(`/diaries/${diaryId}`);

      //then
      expect(response.status).toEqual(400);
    });

    it('ÏÉÅÎåÄÏùò private ÏùºÍ∏∞Ïóê Ï†ëÍ∑ºÌïòÎ©¥, 403ÏóêÎü¨ Î∞úÏÉù', async () => {
      //given
      const anotherUser = {
        id: 2,
        email: 'test@test.com',
        nickname: 'test',
        socialId: 'test123',
        socialType: SocialType.NAVER,
        profileImage: 'testImage',
      } as User;
      const mockDiary = {
        title: 'ÏùºÍ∏∞ Ï†úÎ™©',
        content: 'ÏùºÍ∏∞ ÎÇ¥Ïö©',
        emotion: 'üê∂',
        status: DiaryStatus.PRIVATE,
        summary: 'ÏöîÏïΩ',
        mood: MoodDegree.BAD,
        author: anotherUser,
      } as Diary;

      await usersRepository.save(anotherUser);
      await diariesRepository.save(mockDiary);

      const diaryId = mockDiary.id;

      //when
      const response = await request(app.getHttpServer()).get(`/diaries/${diaryId}`);

      //then
      expect(response.status).toEqual(403);
      expect(response.body.message).toEqual('Í∂åÌïúÏù¥ ÏóÜÎäî ÏÇ¨Ïö©ÏûêÏûÖÎãàÎã§.');
    });
  });

  describe('/diaries/:id (PATCH)', () => {
    const mockDiary = {
      title: 'ÏùºÍ∏∞ Ï†úÎ™©',
      content: 'ÏùºÍ∏∞ ÎÇ¥Ïö©',
      emotion: 'üê∂',
      status: DiaryStatus.PRIVATE,
      summary: 'ÏöîÏïΩ',
      mood: MoodDegree.BAD,
      author: mockUser,
    } as Diary;

    beforeEach(async () => {
      await usersRepository.save(mockUser);
      await diariesRepository.save(mockDiary);
    });

    it('Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî ÏùºÍ∏∞Ïóê ÏàòÏ†ï ÏöîÏ≤≠ÏùÑ ÌïòÎ©¥ 400 Î∞òÌôò', async () => {
      //given
      const updateData = {};

      //when
      const response = await request(app.getHttpServer())
        .patch(`/diaries/${mockDiary.id + 1}`)
        .send(updateData);

      //then
      expect(response.status).toEqual(400);
    });

    it('ÏàòÏ†ï Ï†ïÎ≥¥Í∞Ä Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏïÑÎèÑ 200 Î∞òÌôò', async () => {
      //given
      const updateData = {};

      //when
      const response = await request(app.getHttpServer())
        .patch(`/diaries/${mockDiary.id}`)
        .send(updateData);

      //then
      expect(response.status).toEqual(200);
    });

    it('ÏàòÏ†ï Ï†ïÎ≥¥Í∞Ä Ï°¥Ïû¨ÌïòÎ©¥ Ìï¥Îãπ Ï†ïÎ≥¥Îßå ÏàòÏ†ï ÌõÑ 200 Î∞òÌôò', async () => {
      //given
      const updateData = {
        title: 'update title',
      };

      //when
      const response = await request(app.getHttpServer())
        .patch(`/diaries/${mockDiary.id}`)
        .send(updateData);

      //then
      expect(response.status).toEqual(200);
    });
  });

  describe('/diaries/:id (DELETE)', () => {
    const mockDiary = {
      title: 'ÏùºÍ∏∞ Ï†úÎ™©',
      content: 'ÏùºÍ∏∞ ÎÇ¥Ïö©',
      emotion: 'üê∂',
      status: DiaryStatus.PRIVATE,
      summary: 'ÏöîÏïΩ',
      mood: MoodDegree.BAD,
      author: mockUser,
    } as Diary;

    beforeEach(async () => {
      await usersRepository.save(mockUser);
      await diariesRepository.save(mockDiary);
    });

    it('Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî ÏùºÍ∏∞Ïóê ÏÇ≠Ï†ú ÏöîÏ≤≠ÏùÑ Î≥¥ÎÇ¥Î©¥ 400 Î∞òÌôò', async () => {
      //given
      const diaryId = mockDiary.id + 1;

      //when
      const response = await request(app.getHttpServer()).delete(`/diaries/${diaryId}`);

      //then
      expect(response.status).toEqual(400);
    });

    it('Ï°¥Ïû¨ÌïòÎäî ÏùºÍ∏∞Ïóê ÏÇ≠Ï†ú ÏöîÏ≤≠ÏùÑ Î≥¥ÎÇ¥Î©¥ 200 Î∞òÌôò', async () => {
      //given
      const diaryId = mockDiary.id;

      //when
      const response = await request(app.getHttpServer()).delete(`/diaries/${diaryId}`);

      //then
      expect(response.status).toEqual(200);
    });
  });

  describe('/diaries/users/:id (GET)', () => {
    const mockDiary = {
      title: 'ÏùºÍ∏∞ Ï†úÎ™©',
      content: 'ÏùºÍ∏∞ ÎÇ¥Ïö©',
      emotion: 'üê∂',
      status: DiaryStatus.PRIVATE,
      summary: 'ÏöîÏïΩ',
      mood: MoodDegree.BAD,
      author: mockUser,
    } as Diary;

    beforeEach(async () => {
      await usersRepository.save(mockUser);
      await diariesRepository.save(mockDiary);
    });

    it('Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ ÏùºÏûê ÌÉÄÏûÖÏúºÎ°ú ÏöîÏ≤≠Ïù¥ Ïò§Î©¥ 400ÏóêÎü¨ Î∞úÏÉù', async () => {
      //given
      const dto = {
        type: 'wrongType',
      };
      const query = new URLSearchParams(dto).toString();
      const url = `/diaries/users/${mockUser.id}?${query}`;

      //when
      const response = await request(app.getHttpServer()).get(url);

      //then
      expect(response.status).toEqual(400);
    });

    it('ÏùºÏûê ÌÉÄÏûÖÏù¥ DayÍ∞Ä ÏïÑÎãàÍ≥†, Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ ÏùºÏûê ÌòïÏãùÏúºÎ°ú ÏöîÏ≤≠Ïù¥ Ïò§Î©¥ 400ÏóêÎü¨ Î∞úÏÉù', async () => {
      //given
      const dto = {
        type: TimeUnit.Month,
        startDate: '24-01-01',
        endDate: '24-01-01',
      };
      const query = new URLSearchParams(dto).toString();
      const url = `/diaries/users/${mockUser.id}?${query}`;

      //when
      const response = await request(app.getHttpServer()).get(url);

      //then
      expect(response.status).toEqual(400);
    });

    it('ÏùºÏûê ÌÉÄÏûÖÏù¥ DayÍ∞Ä ÏïÑÎãàÎ©¥, Í∏∞Í∞Ñ ÎÇ¥ ÏùºÍ∏∞ Ï°∞Ìöå Ï†ïÎ≥¥ Î∞òÌôò', async () => {
      const now = new Date();
      const endDate = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}-${String(
        now.getDate(),
      ).padStart(2, '0')}`;
      const dto = {
        type: TimeUnit.Month,
        startDate: '2024-01-01',
        endDate,
      };
      const query = new URLSearchParams(dto).toString();
      const url = `/diaries/users/${mockUser.id}?${query}`;

      //when
      const response = await request(app.getHttpServer()).get(url);
      const body = response.body;

      //then
      expect(response.status).toEqual(200);
      expect(body.nickname).toEqual(mockUser.nickname);
      expect(body.diaryList).toHaveLength(1);
      expect(body.diaryList[0].diaryId).toEqual(mockDiary.id);
    });

    it('ÏùºÏûê ÌÉÄÏûÖÏù¥ DayÍ∞Ä ÏïÑÎãàÍ≥†, Í∏∞Í∞Ñ ÎÇ¥ ÏùºÍ∏∞Í∞Ä ÏóÜÏúºÎ©¥ Îπà Î¶¨Ïä§Ìä∏ Î∞òÌôò', async () => {
      const dto = {
        type: TimeUnit.Month,
        startDate: '2024-01-01',
        endDate: '2024-02-01',
      };
      const query = new URLSearchParams(dto).toString();
      const url = `/diaries/users/${mockUser.id}?${query}`;

      //when
      const response = await request(app.getHttpServer()).get(url);
      const body = response.body;

      //then
      expect(response.status).toEqual(200);
      expect(body.nickname).toEqual(mockUser.nickname);
      expect(body.diaryList).toHaveLength(0);
    });

    it('ÏùºÏûê ÌÉÄÏûÖÏù¥ Day, lastIndexÏôÄ Ìï®Íªò ÏöîÏ≤≠Ïù¥ Ïò§Î©¥ lastIndexÎ≥¥Îã§ ÎÇÆÏùÄ IDÏùò ÏùºÍ∏∞ Ï°∞Ìöå Ï†ïÎ≥¥ Î∞òÌôò', async () => {
      //given
      const dto = {
        type: TimeUnit.Day,
        lastIndex: String(mockDiary.id + 1),
      };
      const query = new URLSearchParams(dto).toString();
      const url = `/diaries/users/${mockUser.id}?${query}`;

      //when
      const response = await request(app.getHttpServer()).get(url);
      const body = response.body;

      //then
      expect(response.status).toEqual(200);
      expect(body.nickname).toEqual(mockUser.nickname);
      expect(body.diaryList).toHaveLength(1);
      expect(body.diaryList[0].diaryId).toEqual(mockDiary.id);
    });

    it('ÏùºÏûê ÌÉÄÏûÖÏù¥ Day, lastIndexÎ≥¥Îã§ ÎÇÆÏùÄ IDÏùò ÏùºÍ∏∞Í∞Ä Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏúºÎ©¥ Îπà Î∞∞Ïó¥ Î∞òÌôò', async () => {
      //given
      const dto = {
        type: TimeUnit.Day,
        lastIndex: String(mockDiary.id - 1),
      };
      const query = new URLSearchParams(dto).toString();
      const url = `/diaries/users/${mockUser.id}?${query}`;

      //when
      const response = await request(app.getHttpServer()).get(url);
      const body = response.body;

      //then
      expect(response.status).toEqual(200);
      expect(body.nickname).toEqual(mockUser.nickname);
      expect(body.diaryList).toHaveLength(0);
    });

    it('ÏùºÏûê ÌÉÄÏûÖÏù¥ Day, lastIndex ÏóÜÏù¥ ÏöîÏ≤≠Ïù¥ Ïò§Î©¥ Í∞ÄÏû• ÏµúÏã†Ïùò ÏùºÍ∏∞ Ï°∞Ìöå Ï†ïÎ≥¥ Î∞òÌôò', async () => {
      //given
      const dto = {
        type: TimeUnit.Day,
      };
      const query = new URLSearchParams(dto).toString();
      const url = `/diaries/users/${mockUser.id}?${query}`;

      //when
      const response = await request(app.getHttpServer()).get(url);
      const body = response.body;

      //then
      expect(response.status).toEqual(200);
      expect(body.nickname).toEqual(mockUser.nickname);
      expect(body.diaryList).toHaveLength(1);
      expect(body.diaryList[0].diaryId).toEqual(mockDiary.id);
    });
  });

  describe('/diaries/emotions/:userId (GET)', () => {
    const mockDiaryA = {
      title: 'ÏùºÍ∏∞ Ï†úÎ™©',
      content: 'ÏùºÍ∏∞ ÎÇ¥Ïö©',
      emotion: 'üê∂',
      status: DiaryStatus.PRIVATE,
      summary: 'ÏöîÏïΩ',
      mood: MoodDegree.BAD,
      author: mockUser,
    } as Diary;
    const mockDiaryB = {
      title: 'ÏùºÍ∏∞ Ï†úÎ™©',
      content: 'ÏùºÍ∏∞ ÎÇ¥Ïö©',
      emotion: 'üå±',
      status: DiaryStatus.PRIVATE,
      summary: 'ÏöîÏïΩ',
      mood: MoodDegree.BAD,
      author: mockUser,
      createdAt: subMonths(new Date(), 2),
    } as Diary;

    beforeEach(async () => {
      await usersRepository.save(mockUser);
      await diariesRepository.save(mockDiaryA);
      await diariesRepository.save(mockDiaryB);
    });

    it('Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ ÏùºÏûê ÌÉÄÏûÖÏúºÎ°ú ÏöîÏ≤≠Ïù¥ Ïò§Î©¥ 400ÏóêÎü¨ Î∞úÏÉù', async () => {
      //given
      const dto = {
        startDate: '24-02-01',
      };
      const query = new URLSearchParams(dto).toString();
      const url = `/diaries/emotions/${mockUser.id}?${query}`;

      //when
      const response = await request(app.getHttpServer()).get(url);

      //then
      expect(response.status).toEqual(400);
    });

    it('ÏùºÏûê Ï†ïÎ≥¥Í∞Ä ÏóÜÎã§Î©¥, ÌòÑÏû¨ ÏùºÏûêÎ°úÎ∂ÄÌÑ∞ ÌïúÎã¨ Ïù¥ÎÇ¥Ïùò ÏùºÍ∏∞ Í∞êÏ†ï Ï†ïÎ≥¥ Î∞òÌôò', async () => {
      //given
      const url = `/diaries/emotions/${mockUser.id}`;

      //when
      const response = await request(app.getHttpServer()).get(url);
      const body = response.body;

      //then
      expect(response.status).toEqual(200);
      expect(body.emotions).toHaveLength(1);
      expect(body.emotions[0].emotion).toEqual(mockDiaryA.emotion);
    });

    it('ÏãúÏûë/Ï¢ÖÎ£å ÏùºÏûê Ï§ë ÌïòÎÇòÎùºÎèÑ ÏóÜÎã§Î©¥, ÌòÑÏû¨ ÏùºÏûêÎ°úÎ∂ÄÌÑ∞ ÌïúÎã¨ Ïù¥ÎÇ¥Ïùò ÏùºÍ∏∞ Í∞êÏ†ï Ï†ïÎ≥¥ Î∞òÌôò', async () => {
      //given
      const dto = {
        startDate: '2024-01-01',
      };
      const query = new URLSearchParams(dto).toString();
      const url = `/diaries/emotions/${mockUser.id}?${query}`;

      //when
      const response = await request(app.getHttpServer()).get(url);
      const body = response.body;

      //then
      expect(response.status).toEqual(200);
      expect(body.emotions).toHaveLength(1);
      expect(body.emotions[0].emotion).toEqual(mockDiaryA.emotion);
    });

    it('ÏãúÏûë/Ï¢ÖÎ£å ÏùºÏûê Î™®Îëê Ï°¥Ïû¨ÌïòÎ©¥, Ìï¥Îãπ ÏùºÏûê ÏÇ¨Ïù¥Ïùò ÏùºÍ∏∞ Í∞êÏ†ï Ï†ïÎ≥¥ Î∞òÌôò', async () => {
      //given
      const now = new Date();
      const startDate = `${mockDiaryB.createdAt.getFullYear()}-${String(
        mockDiaryB.createdAt.getMonth(),
      ).padStart(2, '0')}-${String(mockDiaryB.createdAt.getDate()).padStart(2, '0')}`;
      const lastDate = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(
        2,
        '0',
      )}-${String(now.getDate()).padStart(2, '0')}`;

      const dto = { startDate, lastDate };
      const query = new URLSearchParams(dto).toString();
      const url = `/diaries/emotions/${mockUser.id}?${query}`;

      //when
      const response = await request(app.getHttpServer()).get(url);
      const body = response.body;

      //then
      expect(response.status).toEqual(200);
      expect(body.emotions).toHaveLength(2);
      expect([mockDiaryA.emotion, mockDiaryB.emotion]).toContain(body.emotions[0].emotion);
      expect([mockDiaryA.emotion, mockDiaryB.emotion]).toContain(body.emotions[1].emotion);
    });
  });

  describe('/diaries/mood/:userId (GET)', () => {
    const mockDiary = {
      title: 'ÏùºÍ∏∞ Ï†úÎ™©',
      content: 'ÏùºÍ∏∞ ÎÇ¥Ïö©',
      emotion: 'üê∂',
      status: DiaryStatus.PRIVATE,
      summary: 'ÏöîÏïΩ',
      mood: MoodDegree.BAD,
      author: mockUser,
    } as Diary;

    beforeEach(async () => {
      await usersRepository.save(mockUser);
      await diariesRepository.save(mockDiary);
    });

    it('1ÎÖÑÎÇ¥ ÏùºÍ∏∞ Ï†ïÎ≥¥Í∞Ä Ï°¥Ïû¨ÌïòÎ©¥ Ìï¥Îãπ Í∞êÏ†ï ÌÜµÍ≥Ñ Î∞òÌôò', async () => {
      //given
      const url = `/diaries/emotions/${mockUser.id}`;

      //when
      const response = await request(app.getHttpServer()).get(url);
      const body = response.body;

      //then
      expect(body.emotions).toHaveLength(1);
      expect(body.emotions[0].emotion).toEqual(mockDiary.emotion);
    });
  });

  describe('/diaries/search/v1/:keyword (GET)', () => {
    const mockDiaryA = {
      title: 'ÌÖåÏä§Ìä∏ ÏùºÍ∏∞A',
      content: 'ÏùºÍ∏∞ ÎÇ¥Ïö©',
      emotion: 'üê∂',
      status: DiaryStatus.PRIVATE,
      summary: 'ÏöîÏïΩ',
      mood: MoodDegree.BAD,
      author: mockUser,
    } as Diary;

    const mockDiaryB = {
      title: 'ÌÖåÏä§Ìä∏ Î©îÎ™®A',
      content: 'ÏùºÍ∏∞ ÎÇ¥Ïö©',
      emotion: 'üê∂',
      status: DiaryStatus.PRIVATE,
      summary: 'ÏöîÏïΩ',
      mood: MoodDegree.BAD,
      author: mockUser,
    } as Diary;

    beforeEach(async () => {
      await usersRepository.save(mockUser);
      await diariesRepository.save(mockDiaryA);
      await diariesRepository.save(mockDiaryB);
    });

    it('Ìå®ÌÑ¥Ïù¥ ÏùºÏπòÌïòÏßÄ ÏïäÎäî ÏùºÍ∏∞Îäî Î∞òÌôò x', async () => {
      //given
      const keyword = encodeURIComponent('Î©îÎ™®');
      const url = `/diaries/search/v1/${keyword}`;

      //when
      const response = await request(app.getHttpServer()).get(url);
      const body = response.body;

      //then
      expect(body.diaryList).toHaveLength(1);
      expect(body.diaryList[0].title.includes('Î©îÎ™®')).toBeTruthy();
    });

    it('Ìå®ÌÑ¥Ïù¥ ÏùºÏπòÌïòÎäî ÏùºÍ∏∞ Î∞òÌôò', async () => {
      //given
      const keyword = encodeURIComponent('ÌÖåÏä§Ìä∏');
      const url = `/diaries/search/v1/${keyword}`;

      //when
      const response = await request(app.getHttpServer()).get(url);
      const body = response.body;

      //then
      expect(body.diaryList).toHaveLength(2);
      for (let i = 0; i < body.diaryList.length; i++) {
        expect(body.diaryList[i].title.includes('ÌÖåÏä§Ìä∏')).toBeTruthy();
      }
    });

    it('Ìå®ÌÑ¥Ïù¥ ÏùºÏπòÌïòÎ©¥ÏÑú, lastIndex Ïù¥Ï†ÑÏùò ÏùºÍ∏∞ Î∞òÌôò', async () => {
      //given
      const keyword = encodeURIComponent('ÌÖåÏä§Ìä∏');
      const lastIndex = mockDiaryB.id;
      const url = `/diaries/search/v1/${keyword}?lastIndex=${lastIndex}`;

      //when
      const response = await request(app.getHttpServer()).get(url);
      const body = response.body;

      //then
      expect(body.diaryList).toHaveLength(1);
      expect(body.diaryList[0].title.includes('ÌÖåÏä§Ìä∏')).toBeTruthy();
      expect(body.diaryList[0].diaryId < lastIndex).toBeTruthy();
    });
  });

  describe('/diaries/tags/:tagName (GET)', () => {
    const mockTag = { name: 'ÌÖåÏä§Ìä∏ ÌÉúÍ∑∏' };
    const mockDiary = {
      title: 'ÌÖåÏä§Ìä∏ ÏùºÍ∏∞A',
      content: 'ÏùºÍ∏∞ ÎÇ¥Ïö©',
      emotion: 'üê∂',
      status: DiaryStatus.PRIVATE,
      summary: 'ÏöîÏïΩ',
      mood: MoodDegree.BAD,
      author: mockUser,
      tags: [mockTag],
    } as Diary;

    beforeEach(async () => {
      await usersRepository.save(mockUser);
      await tagsRepository.save(mockTag);
      await diariesRepository.save(mockDiary);
    });

    it('ÌäπÏ†ï ÌÉúÍ∑∏Í∞Ä Ìè¨Ìï®Îêú ÏùºÍ∏∞ Î™®Îëê Ï°∞Ìöå', async () => {
      //given
      const tagName = encodeURIComponent('ÌÖåÏä§Ìä∏ ÌÉúÍ∑∏');
      const url = `/diaries/tags/${tagName}`;

      //when
      const response = await request(app.getHttpServer()).get(url);
      const body = response.body;

      //then
      expect(response.status).toEqual(200);
      expect(body.diaryList).toHaveLength(1);
      expect(body.diaryList[0].tags).toContain('ÌÖåÏä§Ìä∏ ÌÉúÍ∑∏');
    });

    it('ÌäπÏ†ï ÌÉúÍ∑∏Í∞Ä Ìè¨Ìï®Îêú ÏùºÍ∏∞Í∞Ä ÏóÜÎã§Î©¥ ÎπàÎ∞∞Ïó¥ Î∞òÌôò', async () => {
      //given
      const tagName = encodeURIComponent('ÌÖåÏä§Ìä∏');
      const url = `/diaries/tags/${tagName}`;

      //when
      const response = await request(app.getHttpServer()).get(url);
      const body = response.body;

      //then
      expect(response.status).toEqual(200);
      expect(body.diaryList).toHaveLength(0);
    });
  });
});
